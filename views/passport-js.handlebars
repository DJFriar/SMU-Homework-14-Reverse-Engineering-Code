<h3>passport.js</h3>
<div uk-grid>
  <div class="uk-width-2-3@s">
    <h5>Code Contents</h5>
    <pre class="line-numbers"><code class="language-javascript">
      var passport = require("passport");
      var LocalStrategy = require("passport-local").Strategy;

      var db = require("../models");

      // Telling passport we want to use a Local Strategy. In other words, we want login with a username/email and password
      passport.use(new LocalStrategy(
        // Our user will sign in using an email, rather than a "username"
        {
          usernameField: "email"
        },
        function(email, password, done) {
          // When a user tries to sign in this code runs
          db.User.findOne({
            where: {
              email: email
            }
          }).then(function(dbUser) {
            // If there's no user with the given email
            if (!dbUser) {
              return done(null, false, {
                message: "Incorrect email."
              });
            }
            // If there is a user with the given email, but the password the user gives us is incorrect
            else if (!dbUser.validPassword(password)) {
              return done(null, false, {
                message: "Incorrect password."
              });
            }
            // If none of the above, return the user
            return done(null, dbUser);
          });
        }
      ));

      // In order to help keep authentication state across HTTP requests,
      // Sequelize needs to serialize and deserialize the user
      // Just consider this part boilerplate needed to make it all work
      passport.serializeUser(function(user, cb) {
        cb(null, user);
      });

      passport.deserializeUser(function(obj, cb) {
        cb(null, obj);
      });

      // Exporting our configured passport
      module.exports = passport;
    </code></pre>
  </div>
  <div class="uk-width-1-3@s">
    <h5>Code Definitions</h5>
    <p>
      {{!-- CODE DEFINITION HERE --}}
    </p>
  </div>
</div>