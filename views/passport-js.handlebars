<h3>passport.js</h3>
<div uk-grid>
  <div class="uk-width-1-2@s">
    <h5>Code Contents</h5>
    <pre class="line-numbers"><code class="language-javascript">
var passport = require("passport");
var LocalStrategy = require("passport-local").Strategy;

var db = require("../models");

// Telling passport we want to use a Local Strategy. In other words, we want login with a username/email and password
passport.use(new LocalStrategy(
  // Our user will sign in using an email, rather than a "username"
  {
    usernameField: "email"
  },
  function(email, password, done) {
    // When a user tries to sign in this code runs
    db.User.findOne({
      where: {
        email: email
      }
    }).then(function(dbUser) {
      // If there's no user with the given email
      if (!dbUser) {
        return done(null, false, {
          message: "Incorrect email."
        });
      }
      // If there is a user with the given email, but the password the user gives us is incorrect
      else if (!dbUser.validPassword(password)) {
        return done(null, false, {
          message: "Incorrect password."
        });
      }
      // If none of the above, return the user
      return done(null, dbUser);
    });
  }
));

// In order to help keep authentication state across HTTP requests,
// Sequelize needs to serialize and deserialize the user
// Just consider this part boilerplate needed to make it all work
passport.serializeUser(function(user, cb) {
  cb(null, user);
});

passport.deserializeUser(function(obj, cb) {
  cb(null, obj);
});

// Exporting our configured passport
module.exports = passport;
    </code></pre>
  </div>
  <div class="uk-width-1-2@s">
    <h5>Code Definitions</h5>
    <span class="fab fa-js bigIcon"></span>
    <p>
      This file was pre-generated and is what makes the <a href="http://www.passportjs.org">Passport</a> package work. Passport is authentication middleware for Node.js. Some highlights of this code are:
    </p>
    <ul>
      <li>
        Lines 8-36 instruct Passport to use a local security stratedy (username and password). Passport supports other strategies such as OAuth, Facebook, HTTP Bearer, TOTP, and many others.
        <ul>
          <li>Line 11 tells Passport to use an email instead of a username</li>
          <li>
            Lines 13-35 are a function that will look in the database for the matching user, and if no such user is found return "Incorrect email" (note this is not a good security practice).
            If a user is found, it then checks the password and if incorrect returns "Incorrect password". If both are valid, then function returns the user. For best security, both invalid 
            user and invalid password should return the same error, otherwise hackers will know a valid account from an invalid one.
          </li>
        </ul>
      </li>
      <li>Lines 41-47 are described by the comments above it, but handle serializing and deserialing the user user. Since it is accross states, I assume this uses some sort of session cookie, but I admit that is just a guess.</li>
    </ul>
  </div>
</div>