<h3>signup.js</h3>
<div uk-grid>
  <div class="uk-width-1-2@s">
    <h5>Code Contents</h5>
    <pre class="line-numbers"><code class="language-javascript">
$(document).ready(function() {
  // Getting references to our form and input
  var signUpForm = $("form.signup");
  var emailInput = $("input#email-input");
  var passwordInput = $("input#password-input");

  // When the signup button is clicked, we validate the email and password are not blank
  signUpForm.on("submit", function(event) {
    event.preventDefault();
    var userData = {
      email: emailInput.val().trim(),
      password: passwordInput.val().trim()
    };

    if (!userData.email || !userData.password) {
      return;
    }
    // If we have an email and password, run the signUpUser function
    signUpUser(userData.email, userData.password);
    emailInput.val("");
    passwordInput.val("");
  });

  // Does a post to the signup route. If successful, we are redirected to the members page
  // Otherwise we log any errors
  function signUpUser(email, password) {
    $.post("/api/signup", {
      email: email,
      password: password
    })
      .then(function(data) {
        window.location.replace("/members");
        // If there's an error, handle it by throwing up a bootstrap alert
      })
      .catch(handleLoginErr);
  }

  function handleLoginErr(err) {
    $("#alert .msg").text(err.responseJSON);
    $("#alert").fadeIn(500);
  }
});
    </code></pre>
  </div>
  <div class="uk-width-1-2@s">
    <h5>Code Definitions</h5>
    <span class="fab fa-js bigIcon"></span>
    <p>
      This JavaScript file powers functions on the <a href="/signup-html">signup.html</a> page.
    </p>
    <ul>
      <li>Line 2 ensures that this page waits for all the data to be ready before executing commands.</li>
      <li>Lines 4-6 use jQuery to reference the forms and button on the page.</li>
      <li>
        Lines 9-23 runs when the Submit button is pressed on the login.html page.
        <ul>
          <li>Line 10 stops the default page refresh from happening.</li>
          <li>Lines 11-14 fetch the email and password that were entered by the user and store them as an object called userData.</li>
          <li>Lines 16-18 ensure that these fields are not blank. If either one is blank then this function is exited.</li>
          <li>If the function wasn't exited from the above check, then line 20 will execute and runs the function <span style="font-style: italic;">signUpUser</span>, defined later on this page.</li>
          <li>Lines 21 and 22 clear the fields on the html page.</li>
        </ul>
      </li>
      <li>
        Lines 27-37 define the function <span style="font-style: italic;">signUpUser</span>.
        <ul>
          <li>Lines 28-31 call the signup API and pass in the JSON values of email and password.</li>
          <li>When the above promise is returned, then lines 32-35 will redirect the user to the <a href="/members-html">members</a> page.</li>
          <li>If an error is encountered then lines 36 will trigger and call <span style="font-style: italic;">handleLoginErr</span>, defined below.</li>
        </ul>
      </li>
      <li>
        Lines 39-42 define the function <span style="font-style: italic;">handleLoginErr</span>.
        <ul>
          <li>Lines 40 and 41 trigger and alert message on the screen that fades in and contains the error in JSON format.</li>
        </ul>
      </li>
    </ul>
  </div>
</div>